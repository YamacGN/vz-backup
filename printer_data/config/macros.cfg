[gcode_macro test_speed_fast]
gcode:
        G28 X0 Y0
        GET_POSITION
        G1 X0 Y0     F90000
        G1 X300 Y300 F90000
        G1 X0 Y0    F90000
        G1 X300 Y300 F90000

        G1 X0 Y300 F90000

        G1 X300 Y0 F90000
        G1 X0 Y300 F90000
        G1 X300 Y0 F90000
        G1 X0 Y300 F90000

        G1 X0 Y0 F90000
        G1 X300 Y0 F90000
        G1 X300 Y300 F90000
        G1 X0 Y300 F90000
        G1 X0 Y0 F90000
   
        G1 X0 Y0     F90000
        G1 X300 Y300 F90000
        G1 X0 Y0     F90000
        G1 X300 Y300 F90000

        G1 X0 Y300 F90000

        G1 X300 Y0 F90000
        G1 X0 Y300 F90000
        G1 X300 Y0 F90000
        G1 X0 Y300 F90000

        G1 X0 Y0 F90000
        G1 X300 Y0 F90000
        G1 X300 Y300 F90000
        G1 X0 Y300 F90000
        G1 X0 Y0 F90000
        G28 X0 Y0
        GET_POSITION

[gcode_macro DISABLE_MOTORS]
gcode:
    M18


[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - PLEASE CUSTOMISE THE SCRIPT
gcode:
    M117 Homing...                 ; display message
    G28 Y0 X0 Z0
    # BED_MESH_PROFILE LOAD=default
    
    #Purge Line Gcode
    G92 E0;
    G90
    G0 X5 Y5 F6000
    G0 Z0.4
    G91
    G1 X120 E30 F1200;
    G1 Y1
    G1 X-120 E30 F1200;
    G92 E0;
    G90
    
    G1 Z15.0 F600 ;move the platform down 15mm
    G1 X125 Y125 F3000
    G92 E0 ;zero the extruded length again
    G1 F9000
    M117 Printing...

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script
gcode:
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
    
    #   Check end position to determine safe directions to move
    {% if printer.toolhead.position.x < (max_x - 15) %}
        {% set x_safe = 10.0 %}
    {% else %}
        {% set x_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 15) %}
        {% set y_safe = 10.0 %}
    {% else %}
        {% set y_safe = -10.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 2) %}
        {% set z_safe = 50.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}
    
    #  Commence PRINT_END
    M400                             ; wait for buffer to clear
    G92 E0                           ; zero the extruder
    G1 E-4.0 F3600                   ; retract
    G91                              ; relative positioning
    G0 Z{z_safe} + Z10 F3600         ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000    ; move nozzle to remove stringing
    M104 S0                          ; turn off hotend
    M140 S0                          ; turn off bed
    M106 S0                          ; turn off fan
    G90                              ; absolute positioning
    G0 X{max_x / 2} Y{max_y - 5} F3600   ; park nozzle at rear
    M84
    BED_MESH_CLEAR
    SET_HEATER_TEMPERATURE HEATER=chamber TARGET=0
    M117 Finished!
	
[gcode_macro ACCELL_TEST_Y]
gcode:

    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(1000)|float * 60 %}

    {% set inset = 10.0|float %}
    {% set accel = 10000|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    G28
	G1 Z5
    G1 X{minX} Y{minY} F{speed} 

    {% for INTERVAL in range(steps) %}
        {% set eff = accel + (INTERVAL * 1000) %} 
        SET_VELOCITY_LIMIT ACCEL={eff} 
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
        G1 X{maxX} Y{minY} F{speed}  
        G1 X{minX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 

[gcode_macro enable_stepper]
gcode:
 SET_STEPPER_ENABLE STEPPER=stepper_x ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_x1 ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y ENABLE=1
 SET_STEPPER_ENABLE STEPPER=stepper_y1 ENABLE=1

[gcode_macro pid_calibrate_bed]
gcode:
 PID_CALIBRATE HEATER=heater_bed TARGET=80

[gcode_macro pid_calibrate_hotend]
gcode:
 PID_CALIBRATE HEATER=extruder TARGET=220


[gcode_macro front_LED_on]
gcode:
	SET_PIN PIN=FRONT value=1   

[gcode_macro front_LED_off]
gcode:
	SET_PIN PIN=FRONT value=0  

[gcode_macro side_LED_on]
gcode:
	SET_PIN PIN=SIDE value=1   
 
[gcode_macro side_LED_off]
gcode:
	SET_PIN PIN=SIDE value=0  

[gcode_macro hatch_LED_on]
gcode:
	SET_PIN PIN=HATCH value=1   
 
[gcode_macro hatch_LED_off]
gcode:
	SET_PIN PIN=HATCH value=0  

[gcode_macro neopixel_on]
gcode:
	SET_PIN PIN=LED value=1   

[gcode_macro neopixel_off]
gcode:
	SET_PIN PIN=LED value=1   

[gcode_macro exhaustfan_on]
gcode: 
	SET_FAN_SPEED FAN=exhaust_fan SPEED=1
###	
	
[gcode_macro exhaustfan_off]
gcode: 
	SET_FAN_SPEED FAN=exhaust_fan SPEED=0
	
	
###		
	
[gcode_macro enclosurefan_on]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=1

###			
	
[gcode_macro enclosurefan_off]
gcode: 
	SET_FAN_SPEED FAN=chamber_fan SPEED=0


[gcode_macro RSCS_on]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=1
###	
	

[gcode_macro RSCS_off]
gcode: 
	SET_FAN_SPEED FAN=RSCS SPEED=0


[gcode_macro BED_MESH_CALIBRATE]
rename_existing: BED_MESH_CALIBRATE_BASE
; gcode parameters
variable_parameter_AREA_START : 0,0
variable_parameter_AREA_END : 0,0
; the clearance between print area and probe area 
variable_mesh_area_offset : 5.0
; number of sample per probe point
variable_probe_samples : 2
; minimum probe count
variable_min_probe_count : 4
; scale up the probe count, should be 1.0 ~ < variable_max_probe_count/variable_min_probe_count
variable_probe_count_scale_factor : 1.0
; enable preference index
variable_enable_reference_index : False
gcode:
    {% if params.AREA_START and params.AREA_END %}
        {% set bedMeshConfig = printer["configfile"].config["bed_mesh"] %}
        {% set safe_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set safe_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set safe_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set safe_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}

        {% set area_min_x = params.AREA_START.split(",")[0]|float %}
	{% set area_min_y = params.AREA_START.split(",")[1]|float %}
	{% set area_max_x = params.AREA_END.split(",")[0]|float %}
	{% set area_max_y = params.AREA_END.split(",")[1]|float %}

	{% if bedMeshConfig.probe_count.split(",")|length == 2 %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[1]|int %}
        {% else %}
            {% set meshPointX = bedMeshConfig.probe_count.split(",")[0]|int %}
            {% set meshPointY = bedMeshConfig.probe_count.split(",")[0]|int %}
        {% endif %}

	{% set meshMaxPointX = meshPointX %}
	{% set meshMaxPointY = meshPointY %}


        {% if (area_min_x < area_max_x) and (area_min_y < area_max_y) %}
            {% if area_min_x - mesh_area_offset >=  safe_min_x %}
                {% set area_min_x = area_min_x - mesh_area_offset %}
            {% else %}
                {% set area_min_x = safe_min_x %}
            {% endif %}

            {% if area_min_y - mesh_area_offset >=  safe_min_y %}
                {% set area_min_y = area_min_y - mesh_area_offset %}
            {% else %}
                {% set area_min_y = safe_min_y %}
            {% endif %}

            {% if area_max_x + mesh_area_offset <=  safe_max_x %}
                {% set area_max_x = area_max_x + mesh_area_offset %}
            {% else %}
                {% set area_max_x = safe_max_x %}
            {% endif %}

            {% if area_max_y + mesh_area_offset <=  safe_max_y %}
                {% set area_max_y = area_max_y + mesh_area_offset %}
            {% else %}
                {% set area_max_y = safe_max_y %}
            {% endif %}

            {% set meshPointX = (meshPointX * (area_max_x - area_min_x) / (safe_max_x - safe_min_x) * probe_count_scale_factor)|round(0)|int %}
            {% if meshPointX < min_probe_count %}
                {% set meshPointX = min_probe_count %}
            {% endif %}
	    {% if meshPointX > meshMaxPointX %}
                {% set meshPointX = meshMaxPointX %}
            {% endif %}

            {% set meshPointY = (meshPointY * (area_max_y -area_min_y ) / (safe_max_y - safe_min_y) * probe_count_scale_factor )|round(0)|int %}
            {% if meshPointY < min_probe_count %}
                {% set meshPointY = min_probe_count %}
            {% endif %}
	    {% if meshPointY > meshMaxPointY %}
                {% set meshPointY = meshMaxPointY %}
            {% endif %}

            {% set algorithm = "bicubic" %}
	    {% if "algorithm" in bedMeshConfig %}
	        {% set algorithm = bedMeshConfig.algorithm %}
            {% endif %}
            {% if meshPointX >=7 or meshPointY >=7 %}
                {% set algorithm = "bicubic" %}
            {% endif %}

            {% if enable_reference_index %}
                {% set referenceIndex = (meshPointX * meshPointY / 2 - 1 )|round(0)|int %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm} relative_reference_index={referenceIndex}
            {% else %}
                BED_MESH_CALIBRATE_BASE mesh_min={area_min_x},{area_min_y} mesh_max={area_max_x},{area_max_y} probe_count={meshPointX},{meshPointY} samples={probe_samples|int} algorithm={algorithm}
            {% endif %}
        {% else %}
            BED_MESH_CALIBRATE_BASE
        {% endif %}
    {% else %}
        BED_MESH_CALIBRATE_BASE
    {% endif %}
    
[gcode_macro PA_tunning]
gcode: 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY=1 ACCEL=500
	TUNING_TOWER COMMAND=SET_PRESSURE_ADVANCE PARAMETER=ADVANCE START=0 FACTOR=.005

[gcode_macro RESONANCES_TEST]
description: Run input shaper test
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  _CG28                                                 ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  {% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
  {% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
  _PRINT_AR T="INPUT SHAPER: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="INPUT SHAPER: Resonance Tests starting"
  _PRINT_AR T="INPUT SHAPER: Mesasure X axis"
  TEST_RESONANCES AXIS=X                                ; measure X
  _PRINT_AR T="INPUT SHAPER: Mesasure Y axis"
  TEST_RESONANCES AXIS=Y                                ; measure Y
  _PRINT_AR T="INPUT SHAPER: Resonance Tests done"
  _PRINT_AR T="INPUT SHAPER: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=SHAPER

[gcode_macro BELT_TEST]
description: Run resonance test to analyze belts
gcode:
  {% set user = printer['gcode_macro _USER_VARIABLE'] %}
  _CG28                                                 ; home if needed
  TURN_OFF_HEATERS                                      ; turn off heaters
  M107                                                  ; turn off fan
  {% if user.hw.chamber.fan %} M141 {% endif %}         ; exhaust fan off
  {% if user.hw.filter.ena %} _SET_FILTER {% endif %}   ; filter off
  _PRINT_AR T="BELT TEST: Noise values, check if sensor is installed"
  MEASURE_AXES_NOISE                                    ; get noise value in log
  _PRINT_AR T="BELT TEST: Resonance Tests starting ..."
  _PRINT_AR T="BELT TEST: Mesasure B belt"
  TEST_RESONANCES AXIS=1,1 OUTPUT=raw_data NAME=b
  _PRINT_AR T="BELT TEST: Mesasure A belt"
  TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=a
  _PRINT_AR T="BELT TEST: Resonance Tests done"
  _PRINT_AR T="BELT TEST: Generate graph in backround"
  RUN_SHELL_COMMAND CMD=plot_graph PARAMS=BELT

[gcode_macro TEST_RESONNANCES_X]
gcode:
 TEST_RESONANCES AXIS=X


[gcode_macro TEST_RESONNANCES_Y]
gcode:
 TEST_RESONANCES AXIS=Y

[gcode_macro ACCELL_TEST_X]
gcode:

    {% set steps = params.STEPS|default(100)|int %}
    {% set speed = params.VELOCITY|default(1000)|float * 60 %}

    {% set inset = 10.0|float %}
    {% set accel = 10000|int %}
    {% set maxX = printer.configfile.settings.stepper_x.position_max|float - inset %}
    {% set maxY = printer.configfile.settings.stepper_y.position_max|float - inset %}
    {% set minX = printer.configfile.settings.stepper_x.position_min|float + inset %}
    {% set minY = printer.configfile.settings.stepper_y.position_min|float + inset %}

    SAVE_GCODE_STATE NAME=accelltest_state

    SET_VELOCITY_LIMIT ACCEL={accel} 
    SET_VELOCITY_LIMIT ACCEL_TO_DECEL={accel}
    G28
	G1 Z5
    G1 X{minX} Y{minY} F{speed} 

    {% for INTERVAL in range(steps) %}
        {% set eff = accel + (INTERVAL * 1000) %} 
        SET_VELOCITY_LIMIT ACCEL={eff} 
        SET_VELOCITY_LIMIT ACCEL_TO_DECEL={eff}
        G1 X{minX} Y{minY} F{speed}  
        G1 X{maxX} Y{maxY} F{speed}  

    {% endfor %}    

    RESTORE_GCODE_STATE NAME=accelltest_state 

[gcode_macro BEGIN]
gcode:

    RESPOND TYPE=command MSG="action:prompt_begin Rotation Distance Calibration"
    RESPOND TYPE=command MSG="action:prompt_text Please follow steps below."
    RESPOND TYPE=command MSG="action:prompt_text Step 1) Heat Hotend to 220C."
    RESPOND TYPE=command MSG="action:prompt_button Begin Heating|_BEGIN2|primary"


    RESPOND TYPE=command MSG="action:prompt_footer_button CANCEL|RESPOND TYPE=command MSG=action:prompt_end|error"
    RESPOND TYPE=command MSG="action:prompt_show"
[gcode_macro _BEGIN2]
    gcode:
       # M104 S220
        RESPOND TYPE=command MSG="action:prompt_text Step 2) Mark The Filament "
        RESPOND TYPE=command MSG="action:prompt_button Begin Calibraton|_BEGIN3|primary"
        RESPOND TYPE=command MSG="action:prompt_show"


[gcode_macro _BEGIN3]
    gcode:
        G0 E3
        RESPOND TYPE=command MSG="action:prompt_footer_button Next Step|_MAINCALIB|error"
        RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _MAINCALIB]
variable_measuredlength = 1
gcode:
    RESPOND TYPE=command MSG="action:prompt_begin Rotation Distance Calibration"
    RESPOND TYPE=command MSG="action:prompt_text Step 3) Measure the filament left"
    RESPOND TYPE=command MSG="action:prompt_text Filament left: {measuredlength} mm"
    RESPOND TYPE=command MSG="action:prompt_button_group_start"
    RESPOND TYPE=command MSG="action:prompt_button +1|_ADD INCREASEMENT=5|primary"
    RESPOND TYPE=command MSG="action:prompt_button +5|_ADD INCREASEMENT=5|primary"
    RESPOND TYPE=command MSG="action:prompt_button +10|_ADD INCREASEMENT=5|primary"
        RESPOND TYPE=command MSG="action:prompt_button_group_end"

    RESPOND TYPE=command MSG="action:prompt_button_group_start"

    RESPOND TYPE=command MSG="action:prompt_button -1|_ADD INCREASEMENT=5|error"
    RESPOND TYPE=command MSG="action:prompt_button -5|_ADD INCREASEMENT=5|error"

    RESPOND TYPE=command MSG="action:prompt_button -10|_ADD INCREASEMENT=5|error"

    RESPOND TYPE=command MSG="action:prompt_button_group_end"
    RESPOND TYPE=command MSG="action:prompt_footer_button Calculate|_calc"
    RESPOND TYPE=command MSG="action:prompt_footer_button Cancel|RESPOND TYPE=command MSG=action:prompt_end|error"
    RESPOND TYPE=command MSG="action:prompt_show"

[gcode_macro _ADD]
    gcode:
        {% set inc = params.INCREASEMENT|default(1)|int %}

        {% set vars = printer["gcode_macro _MAINCALIB"] %}
        SET_GCODE_VARIABLE macro=_MAINCALIB variable=measuredlength value={vars.measuredlength+23} 
       _MAINCALIB
[gcode_macro _calc]
    gcode:
        {% set vars = printer["gcode_macro _MAINCALIB"] %}
        {% set rd  = printer.configfile.settings.extruder.rotation_distance %}
        {% set ad = 120-vars.measuredlength %}
        {%set bd = ad / 100 %}
        {% set newrd = rd * bd %}
        RESPOND TYPE=command MSG=action:prompt_end
        RESPOND TYPE=command MSG="action:prompt_begin Rotation Distance Calibration"
        RESPOND TYPE=command MSG="action:prompt_text New Rotation Distance: {newrd}"
        RESPOND TYPE=command MSG="action:prompt_text Change rotation_distance in your [extruder] section to {newrd}"
        RESPOND TYPE=command MSG="action:prompt_text rotation_distance: {newrd}"
        RESPOND TYPE=command MSG="action:prompt_footer_button Finish Calibration|RESPOND TYPE=command MSG=action:prompt_end|primary"

        RESPOND TYPE=command MSG="action:prompt_show"


        M118 New Rotation Distance: {newrd}